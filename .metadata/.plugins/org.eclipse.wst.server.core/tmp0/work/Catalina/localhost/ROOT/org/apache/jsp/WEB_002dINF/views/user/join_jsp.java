/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.68
 * Generated at: 2022-12-13 14:53:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원가입</title>\r\n");
      out.write("<style>\r\n");
      out.write("	main {\r\n");
      out.write("		margin-top: 5rem;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	h2 {\r\n");
      out.write("		padding-bottom: 10px;\r\n");
      out.write("		font-size: 30px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write(" 	.form-wrapper {\r\n");
      out.write("      	text-align: center;\r\n");
      out.write("      	margin: 100px auto;       	\r\n");
      out.write("	}\r\n");
      out.write("   	\r\n");
      out.write(" 	#joinForm {\r\n");
      out.write("   		width: 700px;\r\n");
      out.write("		margin: 50px auto;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("   	.input-wrapper {\r\n");
      out.write("   		margin-top: 20px;\r\n");
      out.write("   		margin-left: 180px;\r\n");
      out.write("   		padding-bottom: 5px;\r\n");
      out.write("		display: flex;\r\n");
      out.write("		justify-content: space-between;\r\n");
      out.write("		align-items: center;\r\n");
      out.write("		font-size : 13px;\r\n");
      out.write("      	font-weight: bold;\r\n");
      out.write("   	}\r\n");
      out.write("   	\r\n");
      out.write("   	#joinForm input {\r\n");
      out.write("     	height:35px;\r\n");
      out.write("  	 }\r\n");
      out.write("\r\n");
      out.write("   	#btnJoin {\r\n");
      out.write("      	width: 150px; \r\n");
      out.write("      	height:40px;\r\n");
      out.write("      	background-color:black;\r\n");
      out.write("		color:white;\r\n");
      out.write("		font-size: 16px;\r\n");
      out.write("		font-weight: bold;\r\n");
      out.write("   	}\r\n");
      out.write("   	\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"entire-wrap\">\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }/header.jsp", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
      out.write("\r\n");
      out.write("	<main>\r\n");
      out.write("		<div class=\"form-wrapper\">\r\n");
      out.write("			<form id=\"joinForm\" action=\"/user/join.do\" method=\"post\">\r\n");
      out.write("			<h2>회원가입</h2>\r\n");
      out.write("			<p>ACLearn에서 새로운 성장의 기회를 얻으세요.</p><br>\r\n");
      out.write("			<div class=\"input-area\">\r\n");
      out.write("				<div class=\"input-wrapper\" >\r\n");
      out.write("					<label for=\"userId\" >아이디</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div>\r\n");
      out.write("					<input type=\"text\" id=\"userId\" name=\"userId\" size=\"38\"\r\n");
      out.write("							placeholder=\"영문, 숫자 조합으로 8~16자리\" required >\r\n");
      out.write("					<button type=\"button\" id=\"btnIdCheck\" style=\"width: 70px; height: 40px;\">중복체크</button>\r\n");
      out.write("				</div>\r\n");
      out.write("				<p id=\"idValidation\" style=\"color:red; font-size:0.5rem;\">\r\n");
      out.write("					아이디는 영문, 숫자 조합의 8~16자리로 설정해주세요.\r\n");
      out.write("				</p>\r\n");
      out.write("				<div class=\"input-wrapper\" >\r\n");
      out.write("					<label for=\"userPw\">비밀번호</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div>\r\n");
      out.write("					<input type=\"password\" id=\"userPw\" name=\"userPw\" size=\"50\"\r\n");
      out.write("							placeholder=\"영문, 숫자, 특수문자 조합으로 8~16자리\" required>\r\n");
      out.write("				</div>\r\n");
      out.write("				<p id=\"pwValidation\" style=\"color:red; font-size:0.5rem;\">\r\n");
      out.write("					비밀번호는 영문, 숫자, 특수문자 조합의 8~16자리로 설정해주세요.\r\n");
      out.write("				</p>\r\n");
      out.write("				<div class=\"input-wrapper\" >\r\n");
      out.write("					<label for=\"userPwCheck\">비밀번호 확인</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div>\r\n");
      out.write("					<input type=\"password\" id=\"userPwCheck\" name=\"userPwCheck\" size=\"50\"\r\n");
      out.write("					 		placeholder=\"영문, 숫자, 특수문자 조합으로 8~16자리\" required>\r\n");
      out.write("				</div><br>\r\n");
      out.write("				<p id=\"pwCheckResult\" style=\"font-size:0.8rem;\">\r\n");
      out.write("				\r\n");
      out.write("				</p>\r\n");
      out.write("				<div class=\"input-wrapper\" >\r\n");
      out.write("					<label for=\"userName\">이름</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div>\r\n");
      out.write("					<input type=\"text\" id=\"userName\" name=\"userName\" size=\"50\" \r\n");
      out.write("							placeholder=\"이름\" required>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"input-wrapper\" >\r\n");
      out.write("					<label for=\"userNickname\">닉네임</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div>		\r\n");
      out.write("					<input type=\"text\" id=\"userNickname\" name=\"userNickname\" size=\"38\"\r\n");
      out.write("							placeholder=\"영문, 한글, 숫자 조합으로 2~10자리\"required>\r\n");
      out.write("					<button type=\"button\" id=\"btnNickCheck\" style=\"width: 70px; height: 40px;\">중복체크</button>\r\n");
      out.write("				</div>\r\n");
      out.write("				<p id=\"nickValidation\" style=\"color:red; font-size:0.5rem;\">\r\n");
      out.write("					닉네임은 영문, 한글, 숫자 조합의 2~10자리로 설정해주세요.\r\n");
      out.write("				</p>\r\n");
      out.write("				<div class=\"input-wrapper\" >\r\n");
      out.write("					<label for=\"userBirth\">생년월일</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div>\r\n");
      out.write("					<input type=\"text\" id=\"userBirth\" name=\"userBirth\" size=\"50\" \r\n");
      out.write("							placeholder=\"생년월일 8자리(ex.19001201)\" >\r\n");
      out.write("				</div><br>\r\n");
      out.write("				<div style=\"display: block; margin: 20px auto;\">\r\n");
      out.write("					<button type=\"submit\" id=\"btnJoin\">확 인</button>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</form>\r\n");
      out.write("		</div>\r\n");
      out.write("		</main>\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }/footer.jsp", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("		$(function(){\r\n");
      out.write("			// 아이디 중복체크 했는지 확인\r\n");
      out.write("			var checkId = false;\r\n");
      out.write("			// 아이디가 형식에 맞는지\r\n");
      out.write("			var idValidation = false;\r\n");
      out.write("			// 비밀번호가 형식에 맞는지\r\n");
      out.write("			var pwValidation = false;\r\n");
      out.write("			// 비밀번호 확인란과 일치하는지\r\n");
      out.write("			var pwCheck = false;\r\n");
      out.write("			// 닉네임 중복체크\r\n");
      out.write("			var nicknameCheck = false;\r\n");
      out.write("			// 닉에임이 형식에 맞는지\r\n");
      out.write("			var nickValidation = false;\r\n");
      out.write("		\r\n");
      out.write("			$(\"#idValidation\").hide();\r\n");
      out.write("			$(\"#pwValidation\").hide();\r\n");
      out.write("			$(\"#pwCheckResult\").hide();\r\n");
      out.write("			$(\"#nickValidation\").hide();\r\n");
      out.write("			\r\n");
      out.write("			// 아이디 중복체크\r\n");
      out.write("			$(\"#btnIdCheck\").on(\"click\",function(){\r\n");
      out.write("				console.log($(\"#joinForm\").serialize());\r\n");
      out.write("				console.log($(\"#joinForm\"));\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url: '/user/idCheck.do',\r\n");
      out.write("					type: 'post',\r\n");
      out.write("					data: $(\"#joinForm\").serialize(),\r\n");
      out.write("					success: function(obj){\r\n");
      out.write("						console.log(obj);\r\n");
      out.write("						\r\n");
      out.write("						if(obj == 'duplicatedId'){\r\n");
      out.write("							alert(\"중복된 아이디입니다.\");\r\n");
      out.write("							$(\"#userId\").focus();\r\n");
      out.write("						} else {\r\n");
      out.write("							if(confirm(\"사용 가능한 아이디 입니다. '\" + $(\"#userId\").val() + \r\n");
      out.write("									\"'를(을) 사용하시겠습니까?\")) {\r\n");
      out.write("								checkId = true;\r\n");
      out.write("								$(\"#btnIdCheck\").attr(\"disabled\", true);\r\n");
      out.write("							}\r\n");
      out.write("						}\r\n");
      out.write("					},\r\n");
      out.write("					error: function(e){\r\n");
      out.write("						console.log(e);\r\n");
      out.write("					}\r\n");
      out.write("				})				\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			// 아이디 중복체크 후 다시 아이디를 변경했을 때\r\n");
      out.write("			$(\"#userId\").on(\"change\",function(){\r\n");
      out.write("				checkId = false;\r\n");
      out.write("				$(\"#btnIdCheck\").attr(\"disabled\", false);\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			// 아이디 유효성 - 영문, 숫자 조합으로 8~16자리\r\n");
      out.write("			$(\"#userId\").on(\"change\", function(){\r\n");
      out.write("				var regexId = /^(?=.*[a-zA-Z])(?=.*[0-9]).{8,16}$/;\r\n");
      out.write("				var resultId = regexId.exec($(\"#userId\").val());\r\n");
      out.write("				\r\n");
      out.write("				  if(resultId != null){\r\n");
      out.write("					  $(\"#idValidation\").hide(); \r\n");
      out.write("                   }else{\r\n");
      out.write("                	   $(\"#idValidation\").show();\r\n");
      out.write("   					   $(\"#userId\").focus();\r\n");
      out.write("   					   $(\"#btnIdCheck\").attr(\"disabled\", true);\r\n");
      out.write("                   }\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			// 비밀번호 유효성 검사 - 영문, 숫자, 특수문자 조합으로 8~16자리\r\n");
      out.write("			function validatePassword(character){\r\n");
      out.write("				return /^(?=.*[a-zA-Z])(?=.*[!@#$%^&*+=-])(?=.*[0-9]).{8,16}$/.test(character);\r\n");
      out.write("			}\r\n");
      out.write("			// 비밀번호 입력될때마다 유효성 검사\r\n");
      out.write("			$(\"#userPw\").on(\"change\",function(){\r\n");
      out.write("				// 비밀번호 유효성 처리\r\n");
      out.write("				if(!validatePassword($(\"#userPw\").val())){\r\n");
      out.write("					pwValidation = false;\r\n");
      out.write("					$(\"#pwValidation\").show();\r\n");
      out.write("					$(\"#userPw\").focus();\r\n");
      out.write("				} else {\r\n");
      out.write("					pwValidation = true;\r\n");
      out.write("					$(\"#pwValidation\").hide();\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				// 비밀번호 확인까지 입력한 후 다시 비밀번호 재설정할 경우\r\n");
      out.write("				if($(\"#userPw\").val() == $(\"#userPwCheck\").val()){\r\n");
      out.write("					pwCheck = true;\r\n");
      out.write("					$(\"#pwCheckResult\").css(\"color\", \"green\");\r\n");
      out.write("					$(\"#pwCheckResult\").text(\"비밀번호가 일치합니다.\");\r\n");
      out.write("				} else {\r\n");
      out.write("					pwCheck = false;\r\n");
      out.write("					$(\"#pwCheckResult\").css(\"color\", \"red\");\r\n");
      out.write("					$(\"#pwCheckResult\").text(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			// 비밀번호 확인란 입력할 때 일치하는지\r\n");
      out.write("			$(\"#userPwCheck\").on(\"change\", function(){\r\n");
      out.write("				$(\"#pwCheckResult\").show();\r\n");
      out.write("				\r\n");
      out.write("				if($(\"#userPw\").val() == $(\"#userPwCheck\").val()){\r\n");
      out.write("					pwCheck = true;\r\n");
      out.write("					$(\"#pwCheckResult\").css(\"color\", \"green\");\r\n");
      out.write("					$(\"#pwCheckResult\").text(\"비밀번호가 일치합니다.\");\r\n");
      out.write("				} else {\r\n");
      out.write("					pwCheck = false;\r\n");
      out.write("					$(\"#pwCheckResult\").css(\"color\", \"red\");\r\n");
      out.write("					$(\"#pwCheckResult\").text(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			// 닉네임 중복체크\r\n");
      out.write("			$(\"#btnNickCheck\").on(\"click\",function(){\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url: '/user/nicknameCheck.do',\r\n");
      out.write("					type: 'post',\r\n");
      out.write("					data: $(\"#joinForm\").serialize(),\r\n");
      out.write("					success: function(obj){\r\n");
      out.write("						console.log(obj);\r\n");
      out.write("						\r\n");
      out.write("						if(obj == 'duplicatedNickname'){\r\n");
      out.write("							alert(\"중복된 닉네임 입니다.\");\r\n");
      out.write("							$(\"#userNickname\").focus();\r\n");
      out.write("						} else {\r\n");
      out.write("							if(confirm(\"사용 가능한 닉네임 입니다. '\" + $(\"#userNickname\").val() + \r\n");
      out.write("									\"'를(을) 사용하시겠습니까?\")) {\r\n");
      out.write("								nicknameCheck = true;\r\n");
      out.write("								$(\"#btnNickCheck\").attr(\"disabled\", true);\r\n");
      out.write("							}\r\n");
      out.write("						}\r\n");
      out.write("					},\r\n");
      out.write("					error: function(e){\r\n");
      out.write("						console.log(e);\r\n");
      out.write("					}\r\n");
      out.write("				})\r\n");
      out.write("				\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			// 닉네임 중복체크 후 다시 변경\r\n");
      out.write("			$(\"#userNickname\").on(\"change\",function(){\r\n");
      out.write("				nicknameCheck = false;\r\n");
      out.write("				$(\"#btnNickCheck\").attr(\"disabled\", false);\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			// 닉넴 유효성 - 영문, 한글, 숫자 조합으로 2~10자리\r\n");
      out.write("			$(\"#userNickname\").on(\"change\", function(){\r\n");
      out.write("				var regexNick = /^(?=.*[a-z0-9가-힣])[a-z0-9가-힣]{2,10}$/;\r\n");
      out.write("				var resultNick = regexNick.exec($(\"#userNickname\").val());\r\n");
      out.write("				\r\n");
      out.write("				  if(resultNick != null){\r\n");
      out.write("					  $(\"#nickValidation\").hide(); \r\n");
      out.write("                   }else{\r\n");
      out.write("                	   $(\"#nickValidation\").show();\r\n");
      out.write("   					   $(\"#userNickname\").focus();\r\n");
      out.write("   					   $(\"#btnNickCheck\").attr(\"disabled\", true);\r\n");
      out.write("                   }\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("					\r\n");
      out.write("			// 회원가입 제출했을 때\r\n");
      out.write("			$(\"#joinForm\").on(\"submit\", function(e){\r\n");
      out.write("				// 아이디 중복체크가 안됐거나, 중복된 아이디 사용했을 때\r\n");
      out.write("				if(!checkId) {\r\n");
      out.write("					alert(\"아이디 중복체크를 진행하세요.\");\r\n");
      out.write("					$(\"#userId\").focus();\r\n");
      out.write("					e.preventDefault();\r\n");
      out.write("					return false;\r\n");
      out.write("				} \r\n");
      out.write("				\r\n");
      out.write("				// 비밀번호 유효성 검사가 틀렸을 때\r\n");
      out.write("				if(!pwValidation){\r\n");
      out.write("					alert(\"영문, 숫자, 특수문자 조합의 8~16자리로 설정하세요.\");\r\n");
      out.write("					$(\"#userPw\").focus();\r\n");
      out.write("					e.preventDefault();\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				// 비밀번호와 비밀번호 확인이 일치하지 않을 때\r\n");
      out.write("				if(!pwCheck) {\r\n");
      out.write("					alert(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("					$(\"#userPwCheck\").focus();\r\n");
      out.write("					e.preventDefault();\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				// 닉네임 중복체크\r\n");
      out.write("				if(!nicknameCheck) {\r\n");
      out.write("					alert(\"닉네임 중복체크를 진행하세요.\");\r\n");
      out.write("					$(\"#userNickname\").focus();\r\n");
      out.write("					e.preventDefault();\r\n");
      out.write("					return false;\r\n");
      out.write("				} \r\n");
      out.write("				// 모두 true일 경우 아무것도 작성하지 X\r\n");
      out.write("				alert(\"회원가입이 완료되었습니다!\");\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
